//
//  JaemIconStyleKit.swift
//  jaem
//
//  Created by limtaegeun on 2016. 4. 30..
//  Copyright (c) 2016 whataday. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class JaemIconStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static var imageOfExitButton: UIImage?
        static var exitButtonTargets: [AnyObject]?
        static var imageOfGraphIcon: UIImage?
        static var graphIconTargets: [AnyObject]?
        static var imageOfMeasureButton: UIImage?
        static var measureButtonTargets: [AnyObject]?
        static var imageOfBarcode: UIImage?
        static var barcodeTargets: [AnyObject]?
        static var imageOfExit_black: UIImage?
        static var exit_blackTargets: [AnyObject]?
        static var imageOfPattonIcon: UIImage?
        static var pattonIconTargets: [AnyObject]?
        static var imageOfExitBlackArrow: UIImage?
        static var exitBlackArrowTargets: [AnyObject]?
        static var imageOfGrayFillCancel: UIImage?
        static var grayFillCancelTargets: [AnyObject]?
    }

    //// Drawing Methods

    public class func drawCardStackIcon() {
        //// Color Declarations
        let strokeColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Line-+-Line-Copy-3-+-Line-Copy-4
        //// Line Drawing
        let linePath = UIBezierPath()
        linePath.moveToPoint(CGPoint(x: 1, y: 1))
        linePath.addLineToPoint(CGPoint(x: 12.82, y: 1))
        linePath.miterLimit = 4;

        linePath.lineCapStyle = .Square;

        linePath.usesEvenOddFillRule = true;

        strokeColor.setStroke()
        linePath.lineWidth = 1
        linePath.stroke()


        //// Line-Copy-3 Drawing
        let lineCopy3Path = UIBezierPath()
        lineCopy3Path.moveToPoint(CGPoint(x: 1, y: 3))
        lineCopy3Path.addLineToPoint(CGPoint(x: 12.82, y: 3))
        lineCopy3Path.miterLimit = 4;

        lineCopy3Path.lineCapStyle = .Square;

        lineCopy3Path.usesEvenOddFillRule = true;

        strokeColor.setStroke()
        lineCopy3Path.lineWidth = 1
        lineCopy3Path.stroke()


        //// Line-Copy-4 Drawing
        let lineCopy4Path = UIBezierPath()
        lineCopy4Path.moveToPoint(CGPoint(x: 1, y: 5))
        lineCopy4Path.addLineToPoint(CGPoint(x: 12.82, y: 5))
        lineCopy4Path.miterLimit = 4;

        lineCopy4Path.lineCapStyle = .Square;

        lineCopy4Path.usesEvenOddFillRule = true;

        strokeColor.setStroke()
        lineCopy4Path.lineWidth = 1
        lineCopy4Path.stroke()
    }

    public class func drawExitButton() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let fillColor = UIColor(red: 0.907, green: 0.907, blue: 0.907, alpha: 1.000)

        //// exit_black-copy
        //// Fill-16 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 9, 9)
        CGContextRotateCTM(context, -44.95 * CGFloat(M_PI) / 180)

        let fill16Path = UIBezierPath(rect: CGRect(x: -11.83, y: -0.6, width: 23.65, height: 1.2))
        fillColor.setFill()
        fill16Path.fill()

        CGContextRestoreGState(context)


        //// Fill-17 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 9, 9)
        CGContextRotateCTM(context, 44.95 * CGFloat(M_PI) / 180)

        let fill17Path = UIBezierPath(rect: CGRect(x: -11.83, y: -0.6, width: 23.65, height: 1.2))
        fillColor.setFill()
        fill17Path.fill()

        CGContextRestoreGState(context)
    }

    public class func drawAddButton(frame frame: CGRect = CGRect(x: 0, y: 0, width: 27, height: 27)) {
        //// Color Declarations
        let fillColor2 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)


        //// Subframes
        let pluscopy2: CGRect = CGRect(x: frame.minX + floor((frame.width - 24.9) * 0.47552 + 0.5), y: frame.minY + floor((frame.height - 24.9) * 0.47552 + 0.4) + 0.1, width: 24.9, height: 24.9)


        //// plus-copy-2
        //// Fill-38 Drawing
        let fill38Path = UIBezierPath()
        fill38Path.moveToPoint(CGPoint(x: pluscopy2.minX + 12.45, y: pluscopy2.minY + 24.9))
        fill38Path.addCurveToPoint(CGPoint(x: pluscopy2.minX, y: pluscopy2.minY + 12.45), controlPoint1: CGPoint(x: pluscopy2.minX + 5.58, y: pluscopy2.minY + 24.9), controlPoint2: CGPoint(x: pluscopy2.minX, y: pluscopy2.minY + 19.31))
        fill38Path.addCurveToPoint(CGPoint(x: pluscopy2.minX + 12.45, y: pluscopy2.minY), controlPoint1: CGPoint(x: pluscopy2.minX, y: pluscopy2.minY + 5.58), controlPoint2: CGPoint(x: pluscopy2.minX + 5.58, y: pluscopy2.minY))
        fill38Path.addCurveToPoint(CGPoint(x: pluscopy2.minX + 24.9, y: pluscopy2.minY + 12.45), controlPoint1: CGPoint(x: pluscopy2.minX + 19.31, y: pluscopy2.minY), controlPoint2: CGPoint(x: pluscopy2.minX + 24.9, y: pluscopy2.minY + 5.58))
        fill38Path.addCurveToPoint(CGPoint(x: pluscopy2.minX + 12.45, y: pluscopy2.minY + 24.9), controlPoint1: CGPoint(x: pluscopy2.minX + 24.9, y: pluscopy2.minY + 19.31), controlPoint2: CGPoint(x: pluscopy2.minX + 19.31, y: pluscopy2.minY + 24.9))
        fill38Path.addLineToPoint(CGPoint(x: pluscopy2.minX + 12.45, y: pluscopy2.minY + 24.9))
        fill38Path.closePath()
        fill38Path.moveToPoint(CGPoint(x: pluscopy2.minX + 12.45, y: pluscopy2.minY + 1.37))
        fill38Path.addCurveToPoint(CGPoint(x: pluscopy2.minX + 1.37, y: pluscopy2.minY + 12.45), controlPoint1: CGPoint(x: pluscopy2.minX + 6.34, y: pluscopy2.minY + 1.37), controlPoint2: CGPoint(x: pluscopy2.minX + 1.37, y: pluscopy2.minY + 6.34))
        fill38Path.addCurveToPoint(CGPoint(x: pluscopy2.minX + 12.45, y: pluscopy2.minY + 23.53), controlPoint1: CGPoint(x: pluscopy2.minX + 1.37, y: pluscopy2.minY + 18.56), controlPoint2: CGPoint(x: pluscopy2.minX + 6.34, y: pluscopy2.minY + 23.53))
        fill38Path.addCurveToPoint(CGPoint(x: pluscopy2.minX + 23.53, y: pluscopy2.minY + 12.45), controlPoint1: CGPoint(x: pluscopy2.minX + 18.56, y: pluscopy2.minY + 23.53), controlPoint2: CGPoint(x: pluscopy2.minX + 23.53, y: pluscopy2.minY + 18.56))
        fill38Path.addCurveToPoint(CGPoint(x: pluscopy2.minX + 12.45, y: pluscopy2.minY + 1.37), controlPoint1: CGPoint(x: pluscopy2.minX + 23.53, y: pluscopy2.minY + 6.34), controlPoint2: CGPoint(x: pluscopy2.minX + 18.56, y: pluscopy2.minY + 1.37))
        fill38Path.addLineToPoint(CGPoint(x: pluscopy2.minX + 12.45, y: pluscopy2.minY + 1.37))
        fill38Path.closePath()
        fill38Path.miterLimit = 4;

        fill38Path.usesEvenOddFillRule = true;

        fillColor2.setFill()
        fill38Path.fill()


        //// Fill-39 Drawing
        let fill39Path = UIBezierPath(rect: CGRect(x: pluscopy2.minX + 5.82, y: pluscopy2.minY + 11.72, width: 13.25, height: 1.45))
        fillColor2.setFill()
        fill39Path.fill()


        //// Fill-40 Drawing
        let fill40Path = UIBezierPath(rect: CGRect(x: pluscopy2.minX + 11.72, y: pluscopy2.minY + 5.82, width: 1.45, height: 13.25))
        fillColor2.setFill()
        fill40Path.fill()
    }

    public class func drawAddButton2(frame frame: CGRect = CGRect(x: 0, y: 0, width: 27, height: 27)) {
        //// Color Declarations
        let gray204 = UIColor(red: 0.800, green: 0.800, blue: 0.800, alpha: 1.000)


        //// Subframes
        let pluscopy2: CGRect = CGRect(x: frame.minX + floor((frame.width - 24.9) * 0.47552 + 0.5), y: frame.minY + floor((frame.height - 24.9) * 0.47552 + 0.4) + 0.1, width: 24.9, height: 24.9)


        //// plus-copy-2
        //// Fill-38 Drawing
        let fill38Path = UIBezierPath()
        fill38Path.moveToPoint(CGPoint(x: pluscopy2.minX + 12.45, y: pluscopy2.minY + 24.9))
        fill38Path.addCurveToPoint(CGPoint(x: pluscopy2.minX, y: pluscopy2.minY + 12.45), controlPoint1: CGPoint(x: pluscopy2.minX + 5.58, y: pluscopy2.minY + 24.9), controlPoint2: CGPoint(x: pluscopy2.minX, y: pluscopy2.minY + 19.31))
        fill38Path.addCurveToPoint(CGPoint(x: pluscopy2.minX + 12.45, y: pluscopy2.minY), controlPoint1: CGPoint(x: pluscopy2.minX, y: pluscopy2.minY + 5.58), controlPoint2: CGPoint(x: pluscopy2.minX + 5.58, y: pluscopy2.minY))
        fill38Path.addCurveToPoint(CGPoint(x: pluscopy2.minX + 24.9, y: pluscopy2.minY + 12.45), controlPoint1: CGPoint(x: pluscopy2.minX + 19.31, y: pluscopy2.minY), controlPoint2: CGPoint(x: pluscopy2.minX + 24.9, y: pluscopy2.minY + 5.58))
        fill38Path.addCurveToPoint(CGPoint(x: pluscopy2.minX + 12.45, y: pluscopy2.minY + 24.9), controlPoint1: CGPoint(x: pluscopy2.minX + 24.9, y: pluscopy2.minY + 19.31), controlPoint2: CGPoint(x: pluscopy2.minX + 19.31, y: pluscopy2.minY + 24.9))
        fill38Path.addLineToPoint(CGPoint(x: pluscopy2.minX + 12.45, y: pluscopy2.minY + 24.9))
        fill38Path.closePath()
        fill38Path.moveToPoint(CGPoint(x: pluscopy2.minX + 12.45, y: pluscopy2.minY + 1.37))
        fill38Path.addCurveToPoint(CGPoint(x: pluscopy2.minX + 1.37, y: pluscopy2.minY + 12.45), controlPoint1: CGPoint(x: pluscopy2.minX + 6.34, y: pluscopy2.minY + 1.37), controlPoint2: CGPoint(x: pluscopy2.minX + 1.37, y: pluscopy2.minY + 6.34))
        fill38Path.addCurveToPoint(CGPoint(x: pluscopy2.minX + 12.45, y: pluscopy2.minY + 23.53), controlPoint1: CGPoint(x: pluscopy2.minX + 1.37, y: pluscopy2.minY + 18.56), controlPoint2: CGPoint(x: pluscopy2.minX + 6.34, y: pluscopy2.minY + 23.53))
        fill38Path.addCurveToPoint(CGPoint(x: pluscopy2.minX + 23.53, y: pluscopy2.minY + 12.45), controlPoint1: CGPoint(x: pluscopy2.minX + 18.56, y: pluscopy2.minY + 23.53), controlPoint2: CGPoint(x: pluscopy2.minX + 23.53, y: pluscopy2.minY + 18.56))
        fill38Path.addCurveToPoint(CGPoint(x: pluscopy2.minX + 12.45, y: pluscopy2.minY + 1.37), controlPoint1: CGPoint(x: pluscopy2.minX + 23.53, y: pluscopy2.minY + 6.34), controlPoint2: CGPoint(x: pluscopy2.minX + 18.56, y: pluscopy2.minY + 1.37))
        fill38Path.addLineToPoint(CGPoint(x: pluscopy2.minX + 12.45, y: pluscopy2.minY + 1.37))
        fill38Path.closePath()
        fill38Path.miterLimit = 4;

        fill38Path.usesEvenOddFillRule = true;

        gray204.setFill()
        fill38Path.fill()


        //// Fill-39 Drawing
        let fill39Path = UIBezierPath(rect: CGRect(x: pluscopy2.minX + 5.82, y: pluscopy2.minY + 11.17, width: 13.25, height: 1))
        gray204.setFill()
        fill39Path.fill()


        //// Fill-40 Drawing
        let fill40Path = UIBezierPath(rect: CGRect(x: pluscopy2.minX + 11.72, y: pluscopy2.minY + 5.82, width: 1.45, height: 13.25))
        gray204.setFill()
        fill40Path.fill()
    }

    public class func drawGraphIcon() {
        //// Color Declarations
        let fillColor3 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let strokeColor2 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Page-2
        //// b1.시작화면
        //// plus-copy-3-+-Group-+-Group
        //// Group-+-Group
        //// Group 6
        //// plus-copy-4
        //// Fill-38 Drawing
        let fill38Path = UIBezierPath()
        fill38Path.moveToPoint(CGPoint(x: 13.45, y: 25.9))
        fill38Path.addCurveToPoint(CGPoint(x: 1, y: 13.45), controlPoint1: CGPoint(x: 6.58, y: 25.9), controlPoint2: CGPoint(x: 1, y: 20.31))
        fill38Path.addCurveToPoint(CGPoint(x: 13.45, y: 1), controlPoint1: CGPoint(x: 1, y: 6.58), controlPoint2: CGPoint(x: 6.58, y: 1))
        fill38Path.addCurveToPoint(CGPoint(x: 25.9, y: 13.45), controlPoint1: CGPoint(x: 20.31, y: 1), controlPoint2: CGPoint(x: 25.9, y: 6.58))
        fill38Path.addCurveToPoint(CGPoint(x: 13.45, y: 25.9), controlPoint1: CGPoint(x: 25.9, y: 20.31), controlPoint2: CGPoint(x: 20.31, y: 25.9))
        fill38Path.addLineToPoint(CGPoint(x: 13.45, y: 25.9))
        fill38Path.closePath()
        fill38Path.moveToPoint(CGPoint(x: 13.45, y: 2.37))
        fill38Path.addCurveToPoint(CGPoint(x: 2.37, y: 13.45), controlPoint1: CGPoint(x: 7.34, y: 2.37), controlPoint2: CGPoint(x: 2.37, y: 7.34))
        fill38Path.addCurveToPoint(CGPoint(x: 13.45, y: 24.53), controlPoint1: CGPoint(x: 2.37, y: 19.56), controlPoint2: CGPoint(x: 7.34, y: 24.53))
        fill38Path.addCurveToPoint(CGPoint(x: 24.53, y: 13.45), controlPoint1: CGPoint(x: 19.56, y: 24.53), controlPoint2: CGPoint(x: 24.53, y: 19.56))
        fill38Path.addCurveToPoint(CGPoint(x: 13.45, y: 2.37), controlPoint1: CGPoint(x: 24.53, y: 7.34), controlPoint2: CGPoint(x: 19.56, y: 2.37))
        fill38Path.addLineToPoint(CGPoint(x: 13.45, y: 2.37))
        fill38Path.closePath()
        fill38Path.miterLimit = 4;

        fill38Path.usesEvenOddFillRule = true;

        fillColor3.setFill()
        fill38Path.fill()






        //// Group 9
        //// Line Drawing
        let linePath = UIBezierPath()
        linePath.moveToPoint(CGPoint(x: 8.18, y: 8.07))
        linePath.addLineToPoint(CGPoint(x: 8.18, y: 19))
        linePath.miterLimit = 4;

        linePath.lineCapStyle = .Square;

        linePath.usesEvenOddFillRule = true;

        strokeColor2.setStroke()
        linePath.lineWidth = 1.5
        linePath.stroke()


        //// Line-Copy-6 Drawing
        let lineCopy6Path = UIBezierPath()
        lineCopy6Path.moveToPoint(CGPoint(x: 13.81, y: 11.76))
        lineCopy6Path.addLineToPoint(CGPoint(x: 13.81, y: 19))
        lineCopy6Path.miterLimit = 4;

        lineCopy6Path.lineCapStyle = .Square;

        lineCopy6Path.usesEvenOddFillRule = true;

        strokeColor2.setStroke()
        lineCopy6Path.lineWidth = 1.5
        lineCopy6Path.stroke()


        //// Line-Copy-7 Drawing
        let lineCopy7Path = UIBezierPath()
        lineCopy7Path.moveToPoint(CGPoint(x: 19.02, y: 15.27))
        lineCopy7Path.addLineToPoint(CGPoint(x: 19.02, y: 19))
        lineCopy7Path.miterLimit = 4;

        lineCopy7Path.lineCapStyle = .Square;

        lineCopy7Path.usesEvenOddFillRule = true;

        strokeColor2.setStroke()
        lineCopy7Path.lineWidth = 1.5
        lineCopy7Path.stroke()
    }

    public class func drawMeasureButton() {
        //// Color Declarations
        let fillColor3 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Page-2
        //// b1.시작화면
        //// plus-copy-3-+-Group-+-Group
        //// plus-copy-3
        //// Fill-38 Drawing
        let fill38Path = UIBezierPath()
        fill38Path.moveToPoint(CGPoint(x: 13.45, y: 25.9))
        fill38Path.addCurveToPoint(CGPoint(x: 1, y: 13.45), controlPoint1: CGPoint(x: 6.58, y: 25.9), controlPoint2: CGPoint(x: 1, y: 20.31))
        fill38Path.addCurveToPoint(CGPoint(x: 13.45, y: 1), controlPoint1: CGPoint(x: 1, y: 6.58), controlPoint2: CGPoint(x: 6.58, y: 1))
        fill38Path.addCurveToPoint(CGPoint(x: 25.9, y: 13.45), controlPoint1: CGPoint(x: 20.31, y: 1), controlPoint2: CGPoint(x: 25.9, y: 6.58))
        fill38Path.addCurveToPoint(CGPoint(x: 13.45, y: 25.9), controlPoint1: CGPoint(x: 25.9, y: 20.31), controlPoint2: CGPoint(x: 20.31, y: 25.9))
        fill38Path.addLineToPoint(CGPoint(x: 13.45, y: 25.9))
        fill38Path.closePath()
        fill38Path.moveToPoint(CGPoint(x: 13.45, y: 2.37))
        fill38Path.addCurveToPoint(CGPoint(x: 2.37, y: 13.45), controlPoint1: CGPoint(x: 7.34, y: 2.37), controlPoint2: CGPoint(x: 2.37, y: 7.34))
        fill38Path.addCurveToPoint(CGPoint(x: 13.45, y: 24.53), controlPoint1: CGPoint(x: 2.37, y: 19.56), controlPoint2: CGPoint(x: 7.34, y: 24.53))
        fill38Path.addCurveToPoint(CGPoint(x: 24.53, y: 13.45), controlPoint1: CGPoint(x: 19.56, y: 24.53), controlPoint2: CGPoint(x: 24.53, y: 19.56))
        fill38Path.addCurveToPoint(CGPoint(x: 13.45, y: 2.37), controlPoint1: CGPoint(x: 24.53, y: 7.34), controlPoint2: CGPoint(x: 19.56, y: 2.37))
        fill38Path.addLineToPoint(CGPoint(x: 13.45, y: 2.37))
        fill38Path.closePath()
        fill38Path.miterLimit = 4;

        fill38Path.usesEvenOddFillRule = true;

        fillColor3.setFill()
        fill38Path.fill()


        //// Fill-39 Drawing
        let fill39Path = UIBezierPath(rect: CGRect(x: 6.82, y: 12.72, width: 13.25, height: 1.45))
        fillColor3.setFill()
        fill39Path.fill()


        //// Fill-40 Drawing
        let fill40Path = UIBezierPath(rect: CGRect(x: 12.72, y: 6.82, width: 1.45, height: 13.25))
        fillColor3.setFill()
        fill40Path.fill()
    }

    public class func drawBarcode() {
        //// Color Declarations
        let fillColor3 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Page-3
        //// g1-0.검색하기
        //// exit_black-copy-+-Rectangle-54-+-noun_1906_cc
        //// noun_1906_cc
        //// Rectangle-path Drawing
        let rectanglepathPath = UIBezierPath(rect: CGRect(x: 0.08, y: 0, width: 1.59, height: 16))
        fillColor3.setFill()
        rectanglepathPath.fill()


        //// Rectangle-path 2 Drawing
        let rectanglepath2Path = UIBezierPath(rect: CGRect(x: 2.87, y: 0, width: 1.59, height: 16))
        fillColor3.setFill()
        rectanglepath2Path.fill()


        //// Rectangle-path 3 Drawing
        let rectanglepath3Path = UIBezierPath(rect: CGRect(x: 5.46, y: 0, width: 1.59, height: 16))
        fillColor3.setFill()
        rectanglepath3Path.fill()


        //// Rectangle-path 4 Drawing
        let rectanglepath4Path = UIBezierPath(rect: CGRect(x: 7.85, y: 0, width: 1, height: 16))
        fillColor3.setFill()
        rectanglepath4Path.fill()


        //// Rectangle-path 5 Drawing
        let rectanglepath5Path = UIBezierPath(rect: CGRect(x: 9.84, y: 0, width: 1, height: 16))
        fillColor3.setFill()
        rectanglepath5Path.fill()


        //// Rectangle-path 6 Drawing
        let rectanglepath6Path = UIBezierPath(rect: CGRect(x: 12.63, y: 0, width: 2.19, height: 16))
        fillColor3.setFill()
        rectanglepath6Path.fill()


        //// Rectangle-path 7 Drawing
        let rectanglepath7Path = UIBezierPath(rect: CGRect(x: 16.22, y: 0, width: 1.99, height: 16))
        fillColor3.setFill()
        rectanglepath7Path.fill()


        //// Rectangle-path 8 Drawing
        let rectanglepath8Path = UIBezierPath(rect: CGRect(x: 19.2, y: 0, width: 1, height: 16))
        fillColor3.setFill()
        rectanglepath8Path.fill()
    }

    public class func drawExit_black() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let fillColor3 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Page-3
        //// g1-0.검색하기
        //// exit_black-copy-+-Rectangle-54-+-noun_1906_cc
        //// exit_black-copy
        //// Fill-16 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 9, 9)
        CGContextRotateCTM(context, 45 * CGFloat(M_PI) / 180)

        let fill16Path = UIBezierPath(rect: CGRect(x: -0.6, y: -11.83, width: 1.2, height: 23.65))
        fillColor3.setFill()
        fill16Path.fill()

        CGContextRestoreGState(context)


        //// Fill-17 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 9, 9)
        CGContextRotateCTM(context, 44.95 * CGFloat(M_PI) / 180)

        let fill17Path = UIBezierPath(rect: CGRect(x: -11.83, y: -0.6, width: 23.65, height: 1.2))
        fillColor3.setFill()
        fill17Path.fill()

        CGContextRestoreGState(context)
    }

    public class func drawPattonIcon() {
        //// Color Declarations
        let strokeColor2 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Page-3
        //// h1-0.옷-검색화면
        //// Group 4
        //// exit_black-copy-+-Rectangle-54-+-Group
        //// Group 7
        //// Rectangle-71 Drawing
        let rectangle71Path = UIBezierPath(roundedRect: CGRect(x: 1, y: 1, width: 7.41, height: 7.41), cornerRadius: 1)
        strokeColor2.setStroke()
        rectangle71Path.lineWidth = 1
        rectangle71Path.stroke()


        //// Rectangle-71-Copy-3 Drawing
        let rectangle71Copy3Path = UIBezierPath(roundedRect: CGRect(x: 1, y: 11.59, width: 7.41, height: 7.41), cornerRadius: 1)
        strokeColor2.setStroke()
        rectangle71Copy3Path.lineWidth = 1
        rectangle71Copy3Path.stroke()


        //// Rectangle-71-Copy Drawing
        let rectangle71CopyPath = UIBezierPath(roundedRect: CGRect(x: 11.59, y: 1, width: 7.41, height: 7.41), cornerRadius: 1)
        strokeColor2.setStroke()
        rectangle71CopyPath.lineWidth = 1
        rectangle71CopyPath.stroke()


        //// Rectangle-71-Copy-2 Drawing
        let rectangle71Copy2Path = UIBezierPath(roundedRect: CGRect(x: 11.59, y: 11.59, width: 7.41, height: 7.41), cornerRadius: 1)
        strokeColor2.setStroke()
        rectangle71Copy2Path.lineWidth = 1
        rectangle71Copy2Path.stroke()
    }

    public class func drawExitBlackArrow() {
        //// Color Declarations
        let fillColor3 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Page-3
        //// h1-0.옷-검색화면
        //// Group 4
        //// exit_black-copy-+-Rectangle-54-+-Group
        //// exit_black-copy
        //// Fill-26 Drawing
        let fill26Path = UIBezierPath()
        fill26Path.moveToPoint(CGPoint(x: 9.2, y: 17.73))
        fill26Path.addLineToPoint(CGPoint(x: 0.37, y: 8.89))
        fill26Path.addLineToPoint(CGPoint(x: 9.2, y: 0.05))
        fill26Path.addLineToPoint(CGPoint(x: 10.41, y: 1.26))
        fill26Path.addLineToPoint(CGPoint(x: 2.77, y: 8.89))
        fill26Path.addLineToPoint(CGPoint(x: 10.41, y: 16.52))
        fill26Path.addLineToPoint(CGPoint(x: 9.2, y: 17.73))
        fill26Path.closePath()
        fill26Path.miterLimit = 4;

        fill26Path.usesEvenOddFillRule = true;

        fillColor3.setFill()
        fill26Path.fill()


        //// Fill-27 Drawing
        let fill27Path = UIBezierPath(rect: CGRect(x: 1.58, y: 7.98, width: 18.45, height: 1.85))
        fillColor3.setFill()
        fill27Path.fill()
    }

    public class func drawGrayFillCancel() {
        //// Color Declarations
        let fillColor4 = UIColor(red: 0.756, green: 0.756, blue: 0.756, alpha: 1.000)

        //// Page-1
        //// e1-2.옷장-선택1
        //// 헝거팁-뉴욕-후드-+-아베크롬비-+-TOP-+-Cancel
        //// Cancel Drawing
        let cancelPath = UIBezierPath()
        cancelPath.moveToPoint(CGPoint(x: 8, y: 16.1))
        cancelPath.addCurveToPoint(CGPoint(x: 16, y: 8.1), controlPoint1: CGPoint(x: 12.42, y: 16.1), controlPoint2: CGPoint(x: 16, y: 12.52))
        cancelPath.addCurveToPoint(CGPoint(x: 8, y: 0.1), controlPoint1: CGPoint(x: 16, y: 3.68), controlPoint2: CGPoint(x: 12.42, y: 0.1))
        cancelPath.addCurveToPoint(CGPoint(x: 0, y: 8.1), controlPoint1: CGPoint(x: 3.58, y: 0.1), controlPoint2: CGPoint(x: 0, y: 3.68))
        cancelPath.addCurveToPoint(CGPoint(x: 8, y: 16.1), controlPoint1: CGPoint(x: 0, y: 12.52), controlPoint2: CGPoint(x: 3.58, y: 16.1))
        cancelPath.closePath()
        cancelPath.moveToPoint(CGPoint(x: 4.57, y: 4.18))
        cancelPath.addCurveToPoint(CGPoint(x: 3.92, y: 4.18), controlPoint1: CGPoint(x: 4.4, y: 4), controlPoint2: CGPoint(x: 4.1, y: 3.99))
        cancelPath.addCurveToPoint(CGPoint(x: 3.92, y: 4.83), controlPoint1: CGPoint(x: 3.74, y: 4.35), controlPoint2: CGPoint(x: 3.74, y: 4.65))
        cancelPath.addLineToPoint(CGPoint(x: 7.32, y: 8.24))
        cancelPath.addLineToPoint(CGPoint(x: 4.19, y: 11.36))
        cancelPath.addCurveToPoint(CGPoint(x: 4.19, y: 12.02), controlPoint1: CGPoint(x: 4.01, y: 11.54), controlPoint2: CGPoint(x: 4.01, y: 11.84))
        cancelPath.addCurveToPoint(CGPoint(x: 4.85, y: 12.02), controlPoint1: CGPoint(x: 4.37, y: 12.2), controlPoint2: CGPoint(x: 4.67, y: 12.2))
        cancelPath.addLineToPoint(CGPoint(x: 7.98, y: 8.89))
        cancelPath.addLineToPoint(CGPoint(x: 11.15, y: 12.07))
        cancelPath.addCurveToPoint(CGPoint(x: 11.81, y: 12.07), controlPoint1: CGPoint(x: 11.33, y: 12.25), controlPoint2: CGPoint(x: 11.63, y: 12.25))
        cancelPath.addCurveToPoint(CGPoint(x: 11.81, y: 11.41), controlPoint1: CGPoint(x: 11.99, y: 11.89), controlPoint2: CGPoint(x: 11.99, y: 11.59))
        cancelPath.addLineToPoint(CGPoint(x: 8.63, y: 8.24))
        cancelPath.addLineToPoint(CGPoint(x: 12.08, y: 4.79))
        cancelPath.addCurveToPoint(CGPoint(x: 12.08, y: 4.13), controlPoint1: CGPoint(x: 12.26, y: 4.61), controlPoint2: CGPoint(x: 12.26, y: 4.31))
        cancelPath.addCurveToPoint(CGPoint(x: 11.42, y: 4.13), controlPoint1: CGPoint(x: 11.91, y: 3.95), controlPoint2: CGPoint(x: 11.61, y: 3.95))
        cancelPath.addLineToPoint(CGPoint(x: 7.98, y: 7.58))
        cancelPath.addLineToPoint(CGPoint(x: 4.57, y: 4.18))
        cancelPath.closePath()
        cancelPath.miterLimit = 4;

        cancelPath.usesEvenOddFillRule = true;

        fillColor4.setFill()
        cancelPath.fill()
    }

    //// Generated Images

    public class var imageOfExitButton: UIImage {
        if Cache.imageOfExitButton != nil {
            return Cache.imageOfExitButton!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 18, height: 18), false, 0)
            JaemIconStyleKit.drawExitButton()

        Cache.imageOfExitButton = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfExitButton!
    }

    public class func imageOfAddButton2(frame frame: CGRect = CGRect(x: 0, y: 0, width: 27, height: 27)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            JaemIconStyleKit.drawAddButton2(frame: CGRect(x: 0, y: 0, width: frame.size.width, height: frame.size.height))

        let imageOfAddButton2 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfAddButton2
    }

    public class var imageOfGraphIcon: UIImage {
        if Cache.imageOfGraphIcon != nil {
            return Cache.imageOfGraphIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 27, height: 27), false, 0)
            JaemIconStyleKit.drawGraphIcon()

        Cache.imageOfGraphIcon = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfGraphIcon!
    }

    public class var imageOfMeasureButton: UIImage {
        if Cache.imageOfMeasureButton != nil {
            return Cache.imageOfMeasureButton!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 27, height: 27), false, 0)
            JaemIconStyleKit.drawMeasureButton()

        Cache.imageOfMeasureButton = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfMeasureButton!
    }

    public class var imageOfBarcode: UIImage {
        if Cache.imageOfBarcode != nil {
            return Cache.imageOfBarcode!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 16), false, 0)
            JaemIconStyleKit.drawBarcode()

        Cache.imageOfBarcode = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfBarcode!
    }

    public class var imageOfExit_black: UIImage {
        if Cache.imageOfExit_black != nil {
            return Cache.imageOfExit_black!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 18, height: 18), false, 0)
            JaemIconStyleKit.drawExit_black()

        Cache.imageOfExit_black = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfExit_black!
    }

    public class var imageOfPattonIcon: UIImage {
        if Cache.imageOfPattonIcon != nil {
            return Cache.imageOfPattonIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            JaemIconStyleKit.drawPattonIcon()

        Cache.imageOfPattonIcon = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfPattonIcon!
    }

    public class var imageOfExitBlackArrow: UIImage {
        if Cache.imageOfExitBlackArrow != nil {
            return Cache.imageOfExitBlackArrow!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 18), false, 0)
            JaemIconStyleKit.drawExitBlackArrow()

        Cache.imageOfExitBlackArrow = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfExitBlackArrow!
    }

    public class var imageOfGrayFillCancel: UIImage {
        if Cache.imageOfGrayFillCancel != nil {
            return Cache.imageOfGrayFillCancel!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 16, height: 17), false, 0)
            JaemIconStyleKit.drawGrayFillCancel()

        Cache.imageOfGrayFillCancel = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfGrayFillCancel!
    }

    //// Customization Infrastructure

    @IBOutlet var exitButtonTargets: [AnyObject]! {
        get { return Cache.exitButtonTargets }
        set {
            Cache.exitButtonTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: JaemIconStyleKit.imageOfExitButton)
            }
        }
    }

    @IBOutlet var graphIconTargets: [AnyObject]! {
        get { return Cache.graphIconTargets }
        set {
            Cache.graphIconTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: JaemIconStyleKit.imageOfGraphIcon)
            }
        }
    }

    @IBOutlet var measureButtonTargets: [AnyObject]! {
        get { return Cache.measureButtonTargets }
        set {
            Cache.measureButtonTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: JaemIconStyleKit.imageOfMeasureButton)
            }
        }
    }

    @IBOutlet var barcodeTargets: [AnyObject]! {
        get { return Cache.barcodeTargets }
        set {
            Cache.barcodeTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: JaemIconStyleKit.imageOfBarcode)
            }
        }
    }

    @IBOutlet var exit_blackTargets: [AnyObject]! {
        get { return Cache.exit_blackTargets }
        set {
            Cache.exit_blackTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: JaemIconStyleKit.imageOfExit_black)
            }
        }
    }

    @IBOutlet var pattonIconTargets: [AnyObject]! {
        get { return Cache.pattonIconTargets }
        set {
            Cache.pattonIconTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: JaemIconStyleKit.imageOfPattonIcon)
            }
        }
    }

    @IBOutlet var exitBlackArrowTargets: [AnyObject]! {
        get { return Cache.exitBlackArrowTargets }
        set {
            Cache.exitBlackArrowTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: JaemIconStyleKit.imageOfExitBlackArrow)
            }
        }
    }

    @IBOutlet var grayFillCancelTargets: [AnyObject]! {
        get { return Cache.grayFillCancelTargets }
        set {
            Cache.grayFillCancelTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: JaemIconStyleKit.imageOfGrayFillCancel)
            }
        }
    }

}
